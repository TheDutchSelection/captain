#!/bin/bash
# DESCRIPTION: Helper with functions to interact with etcd
# DEPENDENCIES: jq (http://stedolan.github.io/jq/download/)
# REQUIRED ENVS: ETCD_ENDPOINT, ETCD_CA_CERTIFICATE, ETCD_CERTIFICATE_KEY, ETCD_CERTIFICATE, ETCD_CACHE_SECONDS, ETCD_CACHE_FILE
# OPTIONAL ENVS:
# USAGE:
# EXAMPLE:
set -e

etcd_curl_base_path="/v2/keys/"

# $1: file
# $2: max_age_seconds
# return: 0 if not older and 1 if older or non existant
file_older_than_seconds () {
  local file="$1"
  local max_age_seconds="$2"
  local result="1"
  local current_seconds=$(date +%s)
  if [[ -e "$file" ]]; then
    local file_stat=$(stat -c '%Y' "$file")
    local file_age=$(expr "$current_seconds" - "$file_stat")
    if (( "$file_age" < "$max_age_seconds" )); then
      local result="0"
    fi
  fi

  echo "$result"
}

# $1: etcd path
get_etcd_tree () {
  set -e
  local etcd_path="$1"

  if [[ "$etcd_path" != "/" ]]; then
    local etcd_path=${1%/}
  fi

  if [[ -z "$ETCD_CACHE_FILE" ]]; then
    ETCD_CACHE_FILE="/tmp/etcd_tree_cache"
  fi

  if [[ -z "$ETCD_CACHE_SECONDS" ]]; then
    ETCD_CACHE_SECONDS="30"
  fi

  local file="$ETCD_CACHE_FILE"
  local max_cache_seconds="$ETCD_CACHE_SECONDS"
  local file_to_old_or_non_existant=$(file_older_than_seconds "$file" "$max_cache_seconds")

  if [[ "$file_to_old_or_non_existant" == "1" ]]; then
    local etcd_tree=$(curl -s --key "$ETCD_CERTIFICATE_KEY" --cert "$ETCD_CERTIFICATE" --cacert "$ETCD_CA_CERTIFICATE" -L "$ETCD_ENDPOINT""$etcd_curl_base_path"?recursive=true)
    local temp_file="$file""_$RANDOM"
    echo "$etcd_tree" > "$temp_file"
    mv "$temp_file" "$file"
  fi

  local file_content=$(<"$file")

  if [[ "$etcd_path" == "/" ]]; then
    local result=$(echo "$file_content" | jq '.node')
  else
    local result=$(echo "$file_content" | jq '.node | recurse(.nodes[]?) | select(.key | . == "'"$etcd_path"'") | .')
  fi

  echo "$result"
}

# $1: etcd key
get_etcd_value () {
  set -e
  etcd_key="$1"
  etcd_path="/"
  local etcd_tree=$(get_etcd_tree "$etcd_path")
  local quoted_result=$(echo "$etcd_tree" | jq 'recurse(.nodes[]?) | select(.key | . == "'"$etcd_key"'") | .value')
  echo ${quoted_result//\"/}
}

# $1: app key
get_etcd_app_path_from_app_key () {
  set -e
  local app_key="$1"
  local result=$(echo "$app_key" | awk -F'/' '{print "/"$2"/"$3"/"$4"/"$5}')
  echo "$result"
}

# $1: etcd path
# $2: partial etcd key
# $3: etcd value
count_etcd_keys_with_value_for_app () {
  local etcd_path="$1"
  local partial_etcd_key="$2"
  local etcd_value="$3"
  local etcd_tree=$(get_etcd_tree "$etcd_path")
  local result=$(echo "$etcd_tree" | jq '.nodes[] as $app_ids | $app_ids.nodes[] as $keys | $keys | select(.key | contains("/'"$partial_etcd_key"'")) | select(.value | contains("'"$etcd_value"'")) | .value' | wc -l)
  echo "$result"
}

# $1: etcd key
# $2: etcd value
# $3: etcd ttl
set_etcd_value () {
  set -e
  local etcd_key="$1"
  local etcd_value="$2"
  local etcd_ttl="$3"

  local etcd_curl_base_path_without_slash=${etcd_curl_base_path%/}

  if [[ -z "$etcd_ttl" ]]; then
    result=$(curl -s --key "$ETCD_CERTIFICATE_KEY" --cert "$ETCD_CERTIFICATE" --cacert "$ETCD_CA_CERTIFICATE" -L "$ETCD_ENDPOINT""$etcd_curl_base_path_without_slash""$etcd_key" -XPUT -d value="$etcd_value")
  else
    result=$(curl -s --key "$ETCD_CERTIFICATE_KEY" --cert "$ETCD_CERTIFICATE" --cacert "$ETCD_CA_CERTIFICATE" -L "$ETCD_ENDPOINT""$etcd_curl_base_path_without_slash""$etcd_key" -XPUT -d value="$etcd_value" -d ttl="$etcd_ttl")
  fi

  echo "$result"
}

# $1: etcd other key
# $2: etcd partial other key
# $3: etcd partial key
get_etcd_value_from_other_key () {
  set -e
  local other_key="$1"
  local partial_other_key="$2"
  local partial_key="$3"

  local key=${other_key/"$partial_other_key"/"$partial_key"}
  local value=$(get_etcd_value "$key")

  echo "$value"
}

# $1: etcd other key
# $2: etcd partial other key
# $3: etcd partial key
# $4: etcd value
set_etcd_value_from_other_key () {
  set -e
  local other_key="$1"
  local partial_other_key="$2"
  local partial_key="$3"
  local value="$4"

  local key=${other_key/"$partial_other_key"/"$partial_key"}
  local current_value=$(get_etcd_value "$key")

  if [[ "$current_value" != "$value" ]]; then
    set_etcd_value "$key" "$value"
  fi
}