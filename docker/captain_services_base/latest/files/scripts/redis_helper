#!/bin/bash
set -e

redis_namespace="$REDIS_NAMESPACE"":captain:"

redis_false_value="0"
redis_need_restart_field="need_restart"
redis_true_value="1"
redis_restart_field="restart"
redis_update_field="update"

# $1: redis_command
redis_result () {
  set -e
  local redis_command="$1"

  if [[ ! -z "$REDIS_PASSWORD" ]]; then
    local redis_password_command=" -a $REDIS_PASSWORD"
  fi

  local result=$(/usr/bin/redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" -n "$REDIS_DATABASE"$redis_password_command $redis_command)

  echo "$result"
}

# $1: redis app avzone
# $2: redis app
# $3: redis app host
create_redis_containers_hash_key () {
  set -e
  local redis_app_avzone="$1"
  local redis_app="$2"
  local redis_app_host="$3"

  echo "$redis_namespace""$redis_app_avzone"":containers:""$redis_app"":""$redis_app_host"
}

# $1: redis key filter
get_redis_keys () {
  set -e
  local redis_key_filter="$1"

  local redis_command="keys ""$redis_key_filter"
  local result=$(redis_result "$redis_command")
  echo "$result"
}

# $1: redis hash key
# $1: redis hash field
get_redis_hash_value () {
  set -e
  local redis_hash_key="$1"
  local redis_hash_field="$2"

  local redis_command="hget ""$redis_hash_key"" ""$redis_hash_field"
  local result=$(redis_result "$redis_command")
  echo "$result"
}

# $1: redis hash key
# $2: redis hash field
# $3: redis hash field value
set_redis_hash_value () {
  set -e
  local redis_hash_key="$1"
  local redis_hash_field="$2"
  local redis_hash_field_value="$3"

  local redis_command="hset ""$redis_hash_key"" ""$redis_hash_field"" ""$redis_hash_field_value"
  local result=$(redis_result "$redis_command")

  echo "$result"
}

# $1: app key
get_app_from_redis_key () {
  set -e
  local app_key="$1"
  local result=$(echo "$app_key" | awk -F':' '{print $5}')
  echo "$result"
}

# $1: redis keys
# $2: redis field
# $3: redis_value
set_redis_hash_field_from_keys () {
  set -e
  local redis_keys="$1"
  local redis_field="$2"
  local redis_value="$3"

  local result=()

  while read -r redis_key; do
    if [[ ! -z "$redis_key" ]]; then
      local redis_result=$(set_redis_hash_value "$redis_key" "$redis_field" "$redis_value")
      local result=("${result[@]}""set field $redis_field from $redis_key to $redis_value with response from redis: $redis_result"'\n')
    fi
  done <<< "$redis_keys"

  echo ${result[@]}
}

# $1: redis keys
# $2: redis hash field value
# description: returns feedback from redis or the string "false" when all field values are not redis_hash_field_value
check_all_redis_hash_fields_from_keys () {
  set -e
  local redis_keys="$1"
  local redis_value="$2"

  local result=()

  while read -r redis_key; do
    if [[ ! -z "$redis_key" ]]; then
      local redis_result=$(get_redis_hash_value "$redis_key" "$redis_need_restart_field")
      if [[ "$redis_result" == "$redis_value" ]]; then
        local result=("${result[@]}""$redis_key - currently needing a restart"'\n')
      fi

      local redis_result=$(get_redis_hash_value "$redis_key" "$redis_restart_field")
      if [[ "$redis_result" == "$redis_value" ]]; then
        local result=("${result[@]}""$redis_key - currently restarting"'\n')
      fi

      local redis_result=$(get_redis_hash_value "$redis_key" "$redis_update_field")
      if [[ "$redis_result" == "$redis_value" ]]; then
        local result=("${result[@]}""$redis_key - currently updating"'\n')
      fi
    fi
  done <<< "$redis_keys"

  if [[ -z "$result" ]]; then
    echo "false"
  else
    echo ${result[@]}
  fi
}

# $1: app key
# $2: redis hash field
# $3: redis hash field value
count_redis_hash_keys_with_field_with_value_for_app () {
  local app_key="$1"
  local redis_hash_field="$2"
  local redis_hash_field_value="$3"

  local redis_all_app_keys=$(get_redis_keys "$redis_namespace""*:""$app_key"":*")
  
  for redis_app_key in $redis_all_app_keys
  do
    local redis_app_field_value=$(get_redis_hash_value "$redis_app_key" "$redis_hash_field")
    if [[ "$redis_app_field_value" == "$redis_hash_field_value" ]]; then
      if [[ -z "$keys" ]]; then
        local keys="$redis_app_key"
      else
        local keys="$keys"$'\n'"$redis_app_key"
      fi
    fi
  done

  if [[ ! -z "$keys" ]]; then
    local result=$(echo "$keys" | wc -l)
  else
    local result="0"
  fi

  echo "$result"
}
